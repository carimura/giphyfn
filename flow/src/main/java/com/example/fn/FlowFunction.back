public class FlowFunction {
    
    public void handleRequest(String input) {
        Flow flow = Flows.currentFlow();

        GiphyRequest giphyRequest = new GiphyRequest();
        giphyRequest.q = input;

        FlowFuture<SlackResponse> f1 = flow.invokeFunction(getgifFuncID, giphyRequest, GiphyResponse.class)
                .thenCompose((giphyResponse) -> {
                    SlackRequest slackRequest = new SlackRequest();
                    slackRequest.image_url = giphyResponse.response;
                    slackRequest.msg = "Image from Request 1";
                    return currentFlow().invokeFunction(slackFuncID, slackRequest, SlackResponse.class);
                });

        FlowFuture<SlackResponse> f2 = flow.invokeFunction(getgifFuncID, giphyRequest, GiphyResponse.class)
                .thenCompose((giphyResponse) -> {
                    SlackRequest slackRequest = new SlackRequest();
                    slackRequest.image_url = giphyResponse.response;
                    slackRequest.msg = "Image from Request 2";
                    return currentFlow().invokeFunction(slackFuncID, slackRequest, SlackResponse.class);
                });

        flow.allOf(f1, f2).whenComplete((v, throwable) -> {
            if (throwable != null) {
                postMessageToSlack("Something went wrong!");

            } else {
                postMessageToSlack("Finished Flow!");
            }
        });
    }
}


